<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="357" errors="0" failures="7" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2025-04-05" time="10:25:48">
  <environment user="james" machine-name="lt16" cwd="/home/james/repos/db-lab/docker/compose/wud" clr-version="8.0.10" os-version="6.6.82" nunit-version="2.5.8.0" user-domain="" platform="Linux" />
  <culture-info current-culture="en-GB" current-uiculture="en-GB" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="1.8889" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="/home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1" executed="True" result="Failure" success="False" time="1.8889" asserts="0" description="/home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Docker" executed="True" result="Failure" success="False" time="1.7548" asserts="0" description="Docker">
            <results>
              <test-suite type="TestFixture" name="Docker.dbgate" executed="True" result="Success" success="True" time="0.0779" asserts="0" description="Docker.dbgate">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.dbgate.contains docker-compose.yml" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.dbgate.doesn't contain a dockerfile" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.dbgate.contains info.json" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.dbgate.should have a title" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.dbgate.should have a description" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.dbgate.should have a type" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.dbgate.should have a valid type" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.dbgate.should have a homepage" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.dbgate.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.dbgate.should have a repository" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.dbgate.should have a dbdb link" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.dbgate.should have a tests folder" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.dbgate.should have a go test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.dbgate.should have a powershell test" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.dbgate.should have a python test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.dbgate.should have a backup script" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.dbgate.should not have a sample script" time="0.0061" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.dockerproxy" executed="True" result="Success" success="True" time="0.153" asserts="0" description="Docker.dockerproxy">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.dockerproxy.contains docker-compose.yml" time="0.0023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.dockerproxy.doesn't contain a dockerfile" time="0.0066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.dockerproxy.contains info.json" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.dockerproxy.should have a title" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.dockerproxy.should have a description" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.dockerproxy.should have a type" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.dockerproxy.should have a valid type" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.dockerproxy.should have a homepage" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.dockerproxy.should have a registry" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.dockerproxy.should have a repository" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.dockerproxy.should have a dbdb link" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.dockerproxy.should have a tests folder" time="0.0015" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.dockerproxy.should have a go test" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.dockerproxy.should have a powershell test" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.dockerproxy.should have a python test" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.dockerproxy.should have a backup script" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.dockerproxy.should not have a sample script" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.dozzle" executed="True" result="Success" success="True" time="0.2287" asserts="0" description="Docker.dozzle">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.dozzle.contains docker-compose.yml" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.dozzle.doesn't contain a dockerfile" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.dozzle.contains info.json" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.dozzle.should have a title" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.dozzle.should have a description" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.dozzle.should have a type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.dozzle.should have a valid type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.dozzle.should have a homepage" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.dozzle.should have a registry" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.dozzle.should have a repository" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.dozzle.should have a dbdb link" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.dozzle.should have a tests folder" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.dozzle.should have a go test" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.dozzle.should have a powershell test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.dozzle.should have a python test" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.dozzle.should have a backup script" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.dozzle.should not have a sample script" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.dynamodb" executed="True" result="Failure" success="False" time="0.3238" asserts="0" description="Docker.dynamodb">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.dynamodb.contains docker-compose.yml" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.dynamodb.doesn't contain a dockerfile" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.dynamodb.contains info.json" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.dynamodb.should have a title" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.dynamodb.should have a description" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.dynamodb.should have a type" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.dynamodb.should have a valid type" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.dynamodb.should have a homepage" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.dynamodb.should have a registry" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.dynamodb.should have a repository" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.dynamodb.should have a dbdb link" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.dynamodb.should have a tests folder" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.dynamodb.should have a go test" time="0.0107" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'tests/go' to exist, but it did not exist.</message>
                      <stack-trace>at "tests/go" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should have a powershell test" name="Docker.dynamodb.should have a powershell test" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.dynamodb.should have a python test" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.dynamodb.should have a backup script" time="0.0067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.dynamodb.should not have a sample script" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.dynamodb-admin" executed="True" result="Success" success="True" time="0.3965" asserts="0" description="Docker.dynamodb-admin">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.dynamodb-admin.contains docker-compose.yml" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.dynamodb-admin.doesn't contain a dockerfile" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.dynamodb-admin.contains info.json" time="0.0063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.dynamodb-admin.should have a title" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.dynamodb-admin.should have a description" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.dynamodb-admin.should have a type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.dynamodb-admin.should have a valid type" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.dynamodb-admin.should have a homepage" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.dynamodb-admin.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.dynamodb-admin.should have a repository" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.dynamodb-admin.should have a dbdb link" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.dynamodb-admin.should have a tests folder" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.dynamodb-admin.should have a go test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.dynamodb-admin.should have a powershell test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.dynamodb-admin.should have a python test" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.dynamodb-admin.should have a backup script" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.dynamodb-admin.should not have a sample script" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.homepage" executed="True" result="Success" success="True" time="0.4699" asserts="0" description="Docker.homepage">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.homepage.contains docker-compose.yml" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.homepage.doesn't contain a dockerfile" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.homepage.contains info.json" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.homepage.should have a title" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.homepage.should have a description" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.homepage.should have a type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.homepage.should have a valid type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.homepage.should have a homepage" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.homepage.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.homepage.should have a repository" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.homepage.should have a dbdb link" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.homepage.should have a tests folder" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.homepage.should have a go test" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.homepage.should have a powershell test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.homepage.should have a python test" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.homepage.should have a backup script" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.homepage.should not have a sample script" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.minio" executed="True" result="Success" success="True" time="0.5452" asserts="0" description="Docker.minio">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.minio.contains docker-compose.yml" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.minio.doesn't contain a dockerfile" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.minio.contains info.json" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.minio.should have a title" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.minio.should have a description" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.minio.should have a type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.minio.should have a valid type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.minio.should have a homepage" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.minio.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.minio.should have a repository" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.minio.should have a dbdb link" time="0.0037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.minio.should have a tests folder" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.minio.should have a go test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.minio.should have a powershell test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.minio.should have a python test" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.minio.should have a backup script" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.minio.should not have a sample script" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.mkdocs" executed="True" result="Success" success="True" time="0.6201" asserts="0" description="Docker.mkdocs">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.mkdocs.contains docker-compose.yml" time="0.0072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.mkdocs.doesn't contain a dockerfile" time="0.0025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.mkdocs.contains info.json" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.mkdocs.should have a title" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.mkdocs.should have a description" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.mkdocs.should have a type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.mkdocs.should have a valid type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.mkdocs.should have a homepage" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.mkdocs.should have a registry" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.mkdocs.should have a repository" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.mkdocs.should have a dbdb link" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.mkdocs.should have a tests folder" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.mkdocs.should have a go test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.mkdocs.should have a powershell test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.mkdocs.should have a python test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.mkdocs.should have a backup script" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.mkdocs.should not have a sample script" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.mssql2017" executed="True" result="Failure" success="False" time="0.7197" asserts="0" description="Docker.mssql2017">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.mssql2017.contains docker-compose.yml" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.mssql2017.doesn't contain a dockerfile" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.mssql2017.contains info.json" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.mssql2017.should have a title" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.mssql2017.should have a description" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.mssql2017.should have a type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.mssql2017.should have a valid type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.mssql2017.should have a homepage" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.mssql2017.should have a registry" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.mssql2017.should have a repository" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.mssql2017.should have a dbdb link" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.mssql2017.should have a tests folder" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.mssql2017.should have a go test" time="0.0107" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'tests/go' to exist, but it did not exist.</message>
                      <stack-trace>at "tests/go" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should have a powershell test" name="Docker.mssql2017.should have a powershell test" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.mssql2017.should have a python test" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.mssql2017.should have a backup script" time="0.0114" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'backup.sh' to exist, but it did not exist.</message>
                      <stack-trace>at "backup.sh" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:105
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:105</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should not have a sample script" name="Docker.mssql2017.should not have a sample script" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.mssql2019" executed="True" result="Failure" success="False" time="0.8281" asserts="0" description="Docker.mssql2019">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.mssql2019.contains docker-compose.yml" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.mssql2019.doesn't contain a dockerfile" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.mssql2019.contains info.json" time="0.0055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.mssql2019.should have a title" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.mssql2019.should have a description" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.mssql2019.should have a type" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.mssql2019.should have a valid type" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.mssql2019.should have a homepage" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.mssql2019.should have a registry" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.mssql2019.should have a repository" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.mssql2019.should have a dbdb link" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.mssql2019.should have a tests folder" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.mssql2019.should have a go test" time="0.01" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'tests/go' to exist, but it did not exist.</message>
                      <stack-trace>at "tests/go" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should have a powershell test" name="Docker.mssql2019.should have a powershell test" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.mssql2019.should have a python test" time="0.0084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.mssql2019.should have a backup script" time="0.0129" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'backup.sh' to exist, but it did not exist.</message>
                      <stack-trace>at "backup.sh" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:105
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:105</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should not have a sample script" name="Docker.mssql2019.should not have a sample script" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.mssql2022" executed="True" result="Failure" success="False" time="0.9342" asserts="0" description="Docker.mssql2022">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.mssql2022.contains docker-compose.yml" time="0.0068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.mssql2022.doesn't contain a dockerfile" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.mssql2022.contains info.json" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.mssql2022.should have a title" time="0.0073" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.mssql2022.should have a description" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.mssql2022.should have a type" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.mssql2022.should have a valid type" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.mssql2022.should have a homepage" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.mssql2022.should have a registry" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.mssql2022.should have a repository" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.mssql2022.should have a dbdb link" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.mssql2022.should have a tests folder" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.mssql2022.should have a go test" time="0.0106" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'tests/go' to exist, but it did not exist.</message>
                      <stack-trace>at "tests/go" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:87</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should have a powershell test" name="Docker.mssql2022.should have a powershell test" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.mssql2022.should have a python test" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.mssql2022.should have a backup script" time="0.0113" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected path 'backup.sh' to exist, but it did not exist.</message>
                      <stack-trace>at "backup.sh" | Should -Exist, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:105
at &lt;ScriptBlock&gt;, /home/james/repos/db-lab/.pwsh/pester/repo.tests.ps1:105</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should not have a sample script" name="Docker.mssql2022.should not have a sample script" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.pgadmin" executed="True" result="Success" success="True" time="1.0157" asserts="0" description="Docker.pgadmin">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.pgadmin.contains docker-compose.yml" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.pgadmin.doesn't contain a dockerfile" time="0.0053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.pgadmin.contains info.json" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.pgadmin.should have a title" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.pgadmin.should have a description" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.pgadmin.should have a type" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.pgadmin.should have a valid type" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.pgadmin.should have a homepage" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.pgadmin.should have a registry" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.pgadmin.should have a repository" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.pgadmin.should have a dbdb link" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.pgadmin.should have a tests folder" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.pgadmin.should have a go test" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.pgadmin.should have a powershell test" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.pgadmin.should have a python test" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.pgadmin.should have a backup script" time="0.0035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.pgadmin.should not have a sample script" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres-ha" executed="True" result="Success" success="True" time="1.1001" asserts="0" description="Docker.postgres-ha">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres-ha.contains docker-compose.yml" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres-ha.doesn't contain a dockerfile" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres-ha.contains info.json" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres-ha.should have a title" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres-ha.should have a description" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres-ha.should have a type" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres-ha.should have a valid type" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres-ha.should have a homepage" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres-ha.should have a registry" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres-ha.should have a repository" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres-ha.should have a dbdb link" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres-ha.should have a tests folder" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres-ha.should have a go test" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres-ha.should have a powershell test" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres-ha.should have a python test" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres-ha.should have a backup script" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres-ha.should not have a sample script" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres12" executed="True" result="Success" success="True" time="1.183" asserts="0" description="Docker.postgres12">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres12.contains docker-compose.yml" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres12.doesn't contain a dockerfile" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres12.contains info.json" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres12.should have a title" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres12.should have a description" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres12.should have a type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres12.should have a valid type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres12.should have a homepage" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres12.should have a registry" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres12.should have a repository" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres12.should have a dbdb link" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres12.should have a tests folder" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres12.should have a go test" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres12.should have a powershell test" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres12.should have a python test" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres12.should have a backup script" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres12.should not have a sample script" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres13" executed="True" result="Success" success="True" time="1.2668" asserts="0" description="Docker.postgres13">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres13.contains docker-compose.yml" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres13.doesn't contain a dockerfile" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres13.contains info.json" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres13.should have a title" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres13.should have a description" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres13.should have a type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres13.should have a valid type" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres13.should have a homepage" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres13.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres13.should have a repository" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres13.should have a dbdb link" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres13.should have a tests folder" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres13.should have a go test" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres13.should have a powershell test" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres13.should have a python test" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres13.should have a backup script" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres13.should not have a sample script" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres14" executed="True" result="Success" success="True" time="1.3522" asserts="0" description="Docker.postgres14">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres14.contains docker-compose.yml" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres14.doesn't contain a dockerfile" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres14.contains info.json" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres14.should have a title" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres14.should have a description" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres14.should have a type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres14.should have a valid type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres14.should have a homepage" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres14.should have a registry" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres14.should have a repository" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres14.should have a dbdb link" time="0.0039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres14.should have a tests folder" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres14.should have a go test" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres14.should have a powershell test" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres14.should have a python test" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres14.should have a backup script" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres14.should not have a sample script" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres15" executed="True" result="Success" success="True" time="1.4379" asserts="0" description="Docker.postgres15">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres15.contains docker-compose.yml" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres15.doesn't contain a dockerfile" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres15.contains info.json" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres15.should have a title" time="0.0021" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres15.should have a description" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres15.should have a type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres15.should have a valid type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres15.should have a homepage" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres15.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres15.should have a repository" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres15.should have a dbdb link" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres15.should have a tests folder" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres15.should have a go test" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres15.should have a powershell test" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres15.should have a python test" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres15.should have a backup script" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres15.should not have a sample script" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres16" executed="True" result="Success" success="True" time="1.5244" asserts="0" description="Docker.postgres16">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres16.contains docker-compose.yml" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres16.doesn't contain a dockerfile" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres16.contains info.json" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres16.should have a title" time="0.002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres16.should have a description" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres16.should have a type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres16.should have a valid type" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres16.should have a homepage" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres16.should have a registry" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres16.should have a repository" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres16.should have a dbdb link" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres16.should have a tests folder" time="0.0049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres16.should have a go test" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres16.should have a powershell test" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres16.should have a python test" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres16.should have a backup script" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres16.should not have a sample script" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.postgres17" executed="True" result="Success" success="True" time="1.6048" asserts="0" description="Docker.postgres17">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.postgres17.contains docker-compose.yml" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.postgres17.doesn't contain a dockerfile" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.postgres17.contains info.json" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.postgres17.should have a title" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.postgres17.should have a description" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.postgres17.should have a type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.postgres17.should have a valid type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.postgres17.should have a homepage" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.postgres17.should have a registry" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.postgres17.should have a repository" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.postgres17.should have a dbdb link" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.postgres17.should have a tests folder" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.postgres17.should have a go test" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.postgres17.should have a powershell test" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.postgres17.should have a python test" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.postgres17.should have a backup script" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.postgres17.should not have a sample script" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.traefik" executed="True" result="Success" success="True" time="1.677" asserts="0" description="Docker.traefik">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.traefik.contains docker-compose.yml" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.traefik.doesn't contain a dockerfile" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.traefik.contains info.json" time="0.0062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.traefik.should have a title" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.traefik.should have a description" time="0.0022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.traefik.should have a type" time="0.004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.traefik.should have a valid type" time="0.0058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.traefik.should have a homepage" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.traefik.should have a registry" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.traefik.should have a repository" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.traefik.should have a dbdb link" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.traefik.should have a tests folder" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.traefik.should have a go test" time="0.0031" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.traefik.should have a powershell test" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.traefik.should have a python test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.traefik.should have a backup script" time="0.0032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.traefik.should not have a sample script" time="0.0048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Docker.wud" executed="True" result="Success" success="True" time="1.7511" asserts="0" description="Docker.wud">
                <results>
                  <test-case description="contains docker-compose.yml" name="Docker.wud.contains docker-compose.yml" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="doesn't contain a dockerfile" name="Docker.wud.doesn't contain a dockerfile" time="0.0044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="contains info.json" name="Docker.wud.contains info.json" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a title" name="Docker.wud.should have a title" time="0.0043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a description" name="Docker.wud.should have a description" time="0.006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a type" name="Docker.wud.should have a type" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a valid type" name="Docker.wud.should have a valid type" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a homepage" name="Docker.wud.should have a homepage" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a registry" name="Docker.wud.should have a registry" time="0.0042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a repository" name="Docker.wud.should have a repository" time="0.0041" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a dbdb link" name="Docker.wud.should have a dbdb link" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a tests folder" name="Docker.wud.should have a tests folder" time="0.0036" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a go test" name="Docker.wud.should have a go test" time="0.0014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a powershell test" name="Docker.wud.should have a powershell test" time="0.0034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a python test" name="Docker.wud.should have a python test" time="0.0033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have a backup script" name="Docker.wud.should have a backup script" time="0.0038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should not have a sample script" name="Docker.wud.should not have a sample script" time="0.0045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>