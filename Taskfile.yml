version: '3'

env:
  PUID:
    sh: id -u
  PGID:
    sh: id -g
  
dotenv: ['db-lab.env']
  
vars:
  BASELINE: dockerproxy traefik homepage mkdocs
  CORE: dockerproxy traefik homepage mkdocs minio dozzle wud
  DOCKER_FOLDERS:
    sh: ls ./docker/compose
  DOCKER_NETWORKS: backup docker dynamodb etcd mssql postgres web

tasks:
  all-backup:
    aliases:
    - backup-all
    desc: Run backup script on all stacks where available
    cmds:
    - for: { var: DOCKER_FOLDERS}
      cmd: |
        cd docker/compose/{{.ITEM}}
        if [ -f "backup.sh" ]; then
          echo "Backing up {{.ITEM}}"
          chmod +x backup.sh
          ./backup.sh > /dev/null
        else
          echo "Skipping {{.ITEM}}"
        fi
    silent: true
  all-destroy:
    aliases:
    - destroy-all
    desc: Run docker compose down on all stacks, including volumes
    cmds:
    - for: { var: DOCKER_FOLDERS }
      cmd: docker compose -f docker/compose/{{.ITEM}}/docker-compose.yml down --volumes
    - for: { var: DOCKER_NETWORKS }
      cmd: docker network rm {{.ITEM}}
  
  all-down:
    aliases:
    - down-all
    desc: Run docker compose down on all stacks, excluding volumes
    cmds:
    - for: { var: DOCKER_FOLDERS }
      cmd: docker compose -f docker/compose/{{.ITEM}}/docker-compose.yml down

  all-test-go:
    aliases:
    - test-go-all
    - test-all-go
    desc: Test all databases using go (golang) script
    cmds:
    - for: { var: DOCKER_FOLDERS}
      cmd: |
        cd docker/compose/{{.ITEM}}
        if [ -f "tests/go/go.mod" ]; then
          echo "Testing {{.ITEM}}"
          cd tests/go
          go run .
        else
          echo "Skipping {{.ITEM}}"
        fi
    silent: true

  all-test-pwsh:
    aliases:
    - test-pwsh-all
    - test-all-pwsh
    desc: Test all databases using powershell script
    cmds:
    - for: { var: DOCKER_FOLDERS}
      cmd: |
        cd docker/compose/{{.ITEM}}
        if [ -f "tests/powershell/test.ps1" ]; then
          echo "Testing {{.ITEM}}"
          cd tests/powershell
          pwsh -f ./test.ps1
        else
          echo "Skipping {{.ITEM}}"
        fi
    silent: true

  all-test-py:
    aliases:
    - test-py-all
    - test-all-py
    desc: Test all databases using python script
    cmds:
    - for: { var: DOCKER_FOLDERS}
      cmd: |
        cd docker/compose/{{.ITEM}}
        if [ -f "tests/python/test.py" ]; then
          echo "Testing {{.ITEM}}"
          cd tests/python
          python -m venv env > /dev/null
          ./env/bin/pip install -r requirements.txt > /dev/null
          ./env/bin/python test.py
        else
          echo "Skipping {{.ITEM}}"
        fi
    silent: true

  all-up:
    aliases:
    - up-all
    desc: Run docker compose up on all stacks
    deps: 
    - networks
    cmds:
    - for: { var: DOCKER_FOLDERS }
      cmd: docker compose -f docker/compose/{{.ITEM}}/docker-compose.yml up --build -d --remove-orphans

  baseline-up:
    aliases:
    - baseline
    - up-baseline
    desc: Launch bare minimum for working lab with homepage
    deps:
    - networks
    cmds:
    - for: { var: BASELINE }
      cmd: docker compose -f docker/compose/{{.ITEM}}/docker-compose.yml up -d --remove-orphans

  backup:
    desc: backup database(s)
    dir: '{{.USER_WORKING_DIR}}'
    preconditions:
      - test -f backup.sh
    cmds:
      - chmod +x backup.sh && bash ./backup.sh
    silent: true

  build:
    desc: build docker image
    dir: '{{.USER_WORKING_DIR}}'
    preconditions:
      - test -f Dockerfile
      - test -f tag
    env:
      IMAGE_NAME: 
        sh: basename ${{ .PWD }}
      IMAGE_TAG:
        sh: cat tag
    cmds:
    - echo "building $DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG"
    - docker build -t "$DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG" .
    - echo "uploading $DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG to docker hub"
    - docker push "$DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG"
    silent: true

  cleanup:
    desc: Delete unused docker images
    cmds:
      - docker image prune -a -f

  core:
    aliases:
    - core-up
    - up-core
    desc: Launch common services for working lab with homepage and useful tools
    deps:
    - networks
    cmds:
    - for: { var: CORE }
      cmd: docker compose -f docker/compose/{{.ITEM}}/docker-compose.yml up -d --remove-orphans

  create-folder-shell:
    desc: Create folder structure for a new service
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
    - mkdir tests
    - mkdir tests/go
    - mkdir tests/powershell
    - mkdir tests/python
    - touch backup.sh
    - touch docker-compose.yml
    - touch info.json
    - cd tests/go && go mod init dblab/test && cd ../..
    - touch tests/go/test.go
    - touch tests/powershell/test.ps1
    - touch tests/python/requirements.txt
    - touch tests/python/test.py
      
  destroy:
    desc: Destroy stack in current folder, including volumes
    dir: '{{.USER_WORKING_DIR}}'
    preconditions:
      - test -f docker-compose.yml
    cmds:
      - docker compose down --volumes
  
  down:
    desc: Destroy stack in current folder, excluding volumes
    dir: '{{.USER_WORKING_DIR}}'
    preconditions:
      - test -f docker-compose.yml
    cmds:
      - docker compose down
  
  hello:
    desc: Hello world task
    cmds:
      - echo 'Hello World from Task!'
    silent: true

  networks:
    desc: Create required docker networks
    cmds:
      - for: { var: DOCKER_NETWORKS }
        cmd: docker network inspect {{.ITEM}} --format \{\{.Id\}\} 2>/dev/null || docker network create --driver bridge {{.ITEM}}

  pre-commit:
    desc: Run helper scripts (use before committing changes)
    cmds:
    - pwsh -f .pwsh/mkdocs/Update-Docs.ps1
    - pwsh -f .pwsh/pester/Run-Tests.ps1
    silent: true

  publish:
    desc: Publish image to Docker Hub
    dir: '{{.USER_WORKING_DIR}}'
    deps:
    - build
    env:
      IMAGE_NAME: 
        sh: basename ${{ .PWD }}
      IMAGE_TAG:
        sh: cat tag
    cmds:
    - echo "publishing $DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG"
    - docker push "$DOCKER_HUB_USER/$IMAGE_NAME:$IMAGE_TAG"
    silent: true

  test:
    desc: run all tests
    cmds:
    - echo -e "\e[1;34mTesting with Python\e[0m"
    - task: test-py
    - echo -e "\e[1;34mTesting with Powershell\e[0m"
    - task: test-pwsh
    - echo -e "\e[1;34mTesting with Go\e[0m"
    - task: test-go
    silent: true


  test-go:
    aliases:
    - go-test
    desc: Test database using go (golang) script
    dir: '{{.USER_WORKING_DIR}}/tests/go'
    preconditions:
      - test -f test.go
    cmds:
      - go run .
    silent: true
 
  test-pwsh:
    aliases:
    - pwsh-test
    desc: Test database using powershell script
    dir: '{{.USER_WORKING_DIR}}/tests/powershell'
    preconditions:
      - test -f test.ps1
    cmds:
      - pwsh -f ./test.ps1
    silent: true

  test-py:
    aliases:
    - py-test
    desc: Test database using python script
    dir: '{{.USER_WORKING_DIR}}/tests/python'
    preconditions:
      - test -f test.py
    cmds:
    - cmd: |
        python -m venv env > /dev/null
        ./env/bin/pip install -r requirements.txt > /dev/null
        ./env/bin/python test.py
    silent: true

  up:
    desc: Deploy stack in current folder
    dir: '{{.USER_WORKING_DIR}}'
    deps:
      - networks
    preconditions:
      - test -f docker-compose.yml
    cmds:
      - docker compose up --build -d --remove-orphans